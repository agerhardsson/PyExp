#!/usr/bin/env python
# -*- coding: utf-8 -*-

# import modules --------------------------------------------------------------
from __future__ import division  # handy tool for division

import random

from psychopy import visual, core, event, gui

# Settings --------------------------------------------------------------------

WinWidth = 1000
WinHeigth = 500
FullScreen = False
text_size = 0.07

# Set up window ---------------------------------------------------------------
win = visual.Window(
    size=(WinWidth, WinHeigth),
    fullscr=FullScreen,
    monitor='testMonitor',
    allowGUI=None,
    checkTiming=True
)
    # Create static period
ScreenHZ = win.getActualFrameRate(nIdentical=60,
                                  nMaxFrames=100,
                                  nWarmUpFrames=10,
                                  threshold=1)
ISI = core.StaticPeriod(screenHz=ScreenHZ, win=win)

mouse = event.Mouse(visible=False)

routineTimer = core.CountdownTimer()
clock = core.Clock()
press = False
continueRoutine = True
start_response = False
buttons = mouse.getPressed()

error = visual.TextStim(win,
                        text="False",
                        alignHoriz='center',
                        pos=(0, 0))





trial = 0
start_count = False
clock.reset()

def countwork():
    global clock_stim
    global count
    count = clock.getTime()
    clock_stim = visual.TextStim(win,
                                 text=str(count)[:5],
                                 alignHoriz='center',
                                 pos=(0, 0))
    clock_stim.draw()
    win.flip()
    return count

def response_true():
    clock_stim.draw()
    win.flip()
    core.wait(2)
    mouse.clickReset()


def response_false():
    error.draw()
    win.flip()
    core.wait(2)
    mouse.clickReset()
#
#
# press = False
# start_count = False
# start_response = False
# while continueRoutine:
#
#     if clock.getTime() > interval and not buttons[0]:
#
#
#
#
#     elif clock.getTime() < interval and buttons[0]:
#
#
#     if event.getKeys(keyList=["escape"]):
#         core.quit()
interval = random.uniform(1, 5)
t = 0
clock.reset()
routineTimer.reset()
continuRoutine = True
response_start = False
count_start = False
while continueRoutine:
    t = clock.getTime()


    if t < interval and buttons[0]:
        response_start = False
        count_start = False
        response_false()
        win.flip()
        clock.reset()
        interval = random.uniform(1, 5)
        print(interval)
    elif t > interval and not buttons[0]:
        count_start = True
        response_start is True
        clock.reset()

        while count_start is True:
            countwork()

            if buttons[0]:
                response_start = False
                count_start = False
                response_true()
                win.flip()
                clock.reset()
                interval = random.uniform(1, 5)
                print(interval)
                break

    if event.getKeys(keyList=["escape"]):
        core.quit()
