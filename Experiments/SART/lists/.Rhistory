rm(list=ls())
# Run until find seed with nogo that does not replace mw
# 3 should be 28 and 0 should be 10
n_trials <- 550
n_mw <- 10
# prob_go <- 0.95/8
n_nogo <- 28 # ≈ 5 %
prob_mw <- n_mw/(n_trials + n_mw)
# Sample loop
# Generat a list of n items 1-9, without 3 and 0
for (i in n_trials) {
print(i)
}
go_list <- c(1, 2, 4, 5, 6, 7, 8, 9)
nogo <- 3
mw <- 0
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
# Generat a list of n items 1-9, without 3 and 0
x <- rep(sample(go_list, length(go_list)), length.out=550)
x
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
sample(go_list, length(go_list))
# Generat a list of n items 1-9, without 3 and 0
sample(go_list, length(go_list))
# Generat a list of n items 1-9, without 3 and 0
sample(go_list, length(go_list))
go_list <- sample(c(1, 2, 4, 5, 6, 7, 8, 9), 8)
go_list
sample(go_list, size = 16)
rep(sample(go_list, size = 8), 16)
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, length(go_list))
x
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, length(go_list))
x
# for (i in seq(1,))
x <- sample(go_list, length(go_list))
x
x <- c(x, x)
x
go_list
n_trials + n_mw
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, n_trials + n_mw)
x
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, n_trials + n_mw, replace = TRUE)
x
sample(x)
x <- c(x, x)
x <- c(x, x)
x <- sample(go_list, n_trials + n_mw)
go_list <- sample(c(1, 2, 4, 5, 6, 7, 8, 9), 8)
go_list <- sample(c(1, 2, 4, 5, 6, 7, 8, 9), 8)
x <- sample(go_list, 8)
x <- c(x, x)
x <- c(x, x)
x <- c(x, x)
x <- c(x, x)
x <- c(x, x)
x <- c(x, x)
x
x <- c(x, sample(go_list, 8))
go_list <- sample(c(1, 2, 4, 5, 6, 7, 8, 9), 8)
x <- c(x, sample(go_list, 8))
x <- sample(c(1, 2, 4, 5, 6, 7, 8, 9), 8)
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x
x <- c(x, sample(go_list, 8))
go_list <- c(1, 2, 4, 5, 6, 7, 8, 9)
x <- sample(go_list, 8)
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
x <- c(x, sample(go_list, 8))
lenght(x)
length(x)
x <- sample(go_list, 8)
while (length(x)<561) {
x <- c(x, sample(go_list, 8))
}
n_tot <- n_trials + n_mw
x <- sample(go_list, 8)
while (length(x)<n_tot+1) {
x <- c(x, sample(go_list, 8))
}
x
x <- x[1:560]
rm(list=ls())
# Run until find seed with nogo that does not replace mw
# 3 should be 28 and 0 should be 10
n_trials <- 550
n_mw <- 10
n_tot <- n_trials + n_mw
# prob_go <- 0.95/8
n_nogo <- 28 # ≈ 5 %
prob_mw <- n_mw/(n_trials + n_mw)
go_list <- c(1, 2, 4, 5, 6, 7, 8, 9)
nogo <- 3
mw <- 0
# Sample loop
for (i in seq(1,5)) {
list_name <- paste('list', i, sep = "_")
success <- FALSE
nodouble <- FALSE
while (!success) {
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, 8)
while (length(x)<n_tot+1) {
x <- c(x, sample(go_list, 8))
}
x <- x[1:560]
# Generate random positions for 0s and 3s
# first MW not before trial 15, and first 3 not before trial 3
start_mw <- sample(15:30, 1)
start_nogo <- sample(3:7, 1)
# Distance between MW at least 5, and nogo at least 4
by_mw <- sample(5:9, 1)
by_nogo <- sample(4:6, 1)
# genereate position list
mw_pos <- sort(sample(x = seq(start_mw,560, by = by_mw), size = n_mw))
nogo_pos <- sort(sample(x = seq(start_nogo, 560, by = by_nogo), size = n_nogo))
# replace list with 0s and 3s on each assigned position
x[mw_pos] <- 0
x[nogo_pos] <- 3
# check if any nogo_pos is equal to mw_pos or 7 trials before mw_pos
for (i in mw_pos) {
for (s in seq(0,7)) {
if (any(nogo_pos!=(i + s))) nodouble <- TRUE
}
}
# repeat script until there is 28 3s and 10 0s in the list
if (length(x[x==3]) == n_nogo
& length(x[x==0]) == n_mw
& nodouble == TRUE) success <- TRUE
}
assign(list_name, x)
}
# Check so there is 28 3s and 10 0s in each list
c(table(list_1[list_1==3]), table(list_1[list_1==0]))
c(table(list_2[list_2==3]), table(list_2[list_2==0]))
c(table(list_3[list_3==3]), table(list_3[list_3==0]))
c(table(list_4[list_4==3]), table(list_4[list_4==0]))
c(table(list_5[list_5==3]), table(list_5[list_5==0]))
rm(list=ls())
# Run until find seed with nogo that does not replace mw
# 3 should be 28 and 0 should be 10
n_trials <- 550
n_mw <- 10
n_tot <- n_trials + n_mw
# prob_go <- 0.95/8
n_nogo <- 28 # ≈ 5 %
prob_mw <- n_mw/(n_trials + n_mw)
go_list <- c(1, 2, 4, 5, 6, 7, 8, 9)
nogo <- 3
mw <- 0
# Sample loop
for (i in seq(1,5)) {
list_name <- paste('list', i, sep = "_")
success <- FALSE
nodouble <- FALSE
while (!success) {
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, 8)
while (length(x)<n_tot+1) {
x <- c(x, sample(go_list, 8))
}
x <- x[1:560]
# Generate random positions for 0s and 3s
# first MW not before trial 15, and first 3 not before trial 3
start_mw <- sample(15:30, 1)
start_nogo <- sample(3:7, 1)
# Distance between MW at least 5, and nogo at least 4
by_mw <- sample(5:9, 1)
by_nogo <- sample(4:6, 1)
# genereate position list
mw_pos <- sort(sample(x = seq(start_mw,560, by = by_mw), size = n_mw))
nogo_pos <- sort(sample(x = seq(start_nogo, 560, by = by_nogo), size = n_nogo))
# replace list with 0s and 3s on each assigned position
x[mw_pos] <- 0
x[nogo_pos] <- 3
# check if any nogo_pos is equal to mw_pos or 7 trials before mw_pos
for (i in mw_pos) {
for (s in seq(0,7)) {
if (any(nogo_pos!=(i + s))) nodouble <- TRUE
}
}
# repeat script until there is 28 3s and 10 0s in the list
if (length(x[x==3]) == n_nogo
& length(x[x==0]) == n_mw
& nodouble == TRUE) success <- TRUE
}
assign(list_name, x)
}
# Check so there is 28 3s and 10 0s in each list
c(table(list_1[list_1==3]), table(list_1[list_1==0]))
c(table(list_2[list_2==3]), table(list_2[list_2==0]))
c(table(list_3[list_3==3]), table(list_3[list_3==0]))
c(table(list_4[list_4==3]), table(list_4[list_4==0]))
c(table(list_5[list_5==3]), table(list_5[list_5==0]))
# write lists to files
write.table(list_1, 'list_1.txt', row.names = FALSE, col.names = FALSE)
write.table(list_2, 'list_2.txt', row.names = FALSE, col.names = FALSE)
write.table(list_3, 'list_3.txt', row.names = FALSE, col.names = FALSE)
write.table(list_4, 'list_4.txt', row.names = FALSE, col.names = FALSE)
write.table(list_5, 'list_5.txt', row.names = FALSE, col.names = FALSE)
prob_mw
rm(list=ls())
n_trials <- 550
n_mw <- 10
n_tot <- n_trials + n_mw
# prob_go <- 0.95/8
n_nogo <- 28 # ≈ 5 %
prob_mw <- n_mw/(n_trials + n_mw)
go_list <- c(1, 2, 4, 5, 6, 7, 8, 9)
nogo <- 3
mw <- 0
# Sample loop
for (i in seq(1,5)) {
list_name <- paste('list', i, sep = "_")
success <- FALSE
nodouble <- FALSE
while (!success) {
# Generat a list of n items 1-9, without 3 and 0
x <- sample(go_list, 8)
while (length(x)<n_tot+1) {
x <- c(x, sample(go_list, 8))
}
x <- x[1:n_trials] #
# Generate random positions for 0s and 3s
# first MW not before trial 15, and first 3 not before trial 3
start_mw <- sample(15:30, 1)
start_nogo <- sample(3:7, 1)
# Distance between MW at least 5, and nogo at least 4
by_mw <- sample(5:9, 1)
by_nogo <- sample(4:6, 1)
# genereate position list
mw_pos <- sort(sample(x = seq(start_mw, n_trials, by = by_mw), size = n_mw))
nogo_pos <- sort(sample(x = seq(start_nogo, n_trials, by = by_nogo), size = n_nogo))
# replace list with 0s and 3s on each assigned position
x[mw_pos] <- 0
x[nogo_pos] <- 3
# check if any nogo_pos is equal to mw_pos or 7 trials before mw_pos
for (i in mw_pos) {
for (s in seq(0,7)) {
if (any(nogo_pos!=(i + s))) nodouble <- TRUE
}
}
# repeat script until there is 28 3s and 10 0s in the list
if (length(x[x==3]) == n_nogo
& length(x[x==0]) == n_mw
& nodouble == TRUE) success <- TRUE
}
assign(list_name, x)
}
# Check so there is 28 3s and 10 0s in each list
c(table(list_1[list_1==3]), table(list_1[list_1==0]))
c(table(list_2[list_2==3]), table(list_2[list_2==0]))
c(table(list_3[list_3==3]), table(list_3[list_3==0]))
c(table(list_4[list_4==3]), table(list_4[list_4==0]))
c(table(list_5[list_5==3]), table(list_5[list_5==0]))
